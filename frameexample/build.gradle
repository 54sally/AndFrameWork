apply plugin: 'com.android.application'
//===
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions' // 快捷的findviewByid操作
apply plugin: 'kotlin-kapt' // 让kotlin与databinding合谐并存
//=== tinker step2 tinker插件，只能放在application的gradle中，否则会提示：
// generate TinkerApk:Android Application plugin required
apply plugin: 'com.tencent.tinker.patch'

def packTime() {
    return new Date().format("yyyy-MM-dd_HH-mm")
}

//##################################################################### AndResGuard start
// 因为编译较耗时，只对线上环境进行处理
if ("TRUE".equals(APP_IS_ONLINE_VERSION)) {
    apply plugin: 'AndResGuard'
    // AndResGuard
    andResGuard {
        // mappingFile = file("./resource_mapping.txt")
        mappingFile = null
        use7zip = true
        useSign = true
        // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
        keepRoot = false

        whiteList = [
                // your icon
                "R.drawable.icon",
                // for fabric
                "R.string.com.crashlytics.*",
                // Umeng sdk
                "R.anim.umeng*",
                "R.string.umeng*",
                "R.string.UM*",
                "R.string.tb_*",
                "R.layout.umeng*",
                "R.layout.socialize_*",
                "R.layout.*messager*",
                "R.layout.tb_*",
                "R.color.umeng*",
                "R.color.tb_*",
                "R.style.*UM*",
                "R.style.umeng*",
                "R.drawable.umeng*",
                "R.drawable.tb_*",
                "R.drawable.sina*",
                "R.drawable.qq_*",
                "R.drawable.tb_*",
                "R.id.umeng*",
                "R.id.*messager*",
                "R.id.progress_bar_parent",
                "R.id.socialize_*",
                "R.id.webView",
                // for google-services
                "R.string.google_app_id",
                "R.string.gcm_defaultSenderId",
                "R.string.default_web_client_id",
                "R.string.ga_trackingId",
                "R.string.firebase_database_url",
                "R.string.google_api_key",
                "R.string.google_crash_reporting_api_key",
                "R.dimen.rc_*"
        ]
        compressFilePattern = [
                "*.png",
                "*.jpg",
                "*.jpeg",
                "*.gif",
                "resources.arsc"
        ]
        sevenzip {
            artifact = 'com.tencent.mm:SevenZip:1.2.11'
            //path = "/usr/local/bin/7za"
        }
        /**
         * 可选： 如果不设置则会默认覆盖assemble输出的apk
         **/
        // finalApkBackupPath = "${project.rootDir}/final.apk"
        /**
         * 可选: 指定v1签名时生成jar文件的摘要算法
         * 默认值为“SHA-1”
         **/
        // digestalg = "SHA-256"
        /**
         * 注意问题
         mappingFile用于增量更新，保持本次混淆与上次混淆结果一致；
         uss7zip为true时，useSign必须为true；
         useSign为true时，需要配置signConfig；
         whiteList添加在代码内部需要动态获取的资源id；
         sevenzip可使用artifacr或path，path指本地安装的7za（7zip命令行工具）。
         */
    }
}
//##################################################################### AndResGuard end

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    signingConfigs {
        release {
            try {
                keyAlias 'frameexample'
                keyPassword '12345!#%@$'
                storeFile file('../keystore/andframework.jks')
                storePassword '12345!#%@$'
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("../keystore/debug.keystore")
        }
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion

        // gradle.properties中配置项
        resValue("string", 'APP_VERSION_FRAMEEXAMPLE', APP_VERSION_FRAMEEXAMPLE)
        resValue("string", 'APP_VERCODE_FRAMEEXAMPLE', APP_VERCODE_FRAMEEXAMPLE)
        resValue("string", 'APP_VERSION_FRAMEEXAMPLE_DEV', APP_VERSION_FRAMEEXAMPLE_DEV)
        resValue("string", 'APP_VERCODE_FRAMEEXAMPLE_DEV', APP_VERCODE_FRAMEEXAMPLE_DEV)
        resValue("string", 'APP_URL_ENVIRONMENT', APP_URL_ENVIRONMENT)
        resValue("string", 'APP_IS_SHOW_LOG', APP_IS_SHOW_LOG)
        resValue("string", 'APP_IS_ONLINE_VERSION', APP_IS_ONLINE_VERSION)

        //
        if ("FALSE".equals(APP_IS_ONLINE_VERSION)) {
            // 开发版本
            versionName APP_VERSION_FRAMEEXAMPLE_DEV
            versionCode java.lang.Integer.parseInt(APP_VERCODE_FRAMEEXAMPLE_DEV)
        } else {
            // 正式版本
            versionName APP_VERSION_FRAMEEXAMPLE
            versionCode java.lang.Integer.parseInt(APP_VERCODE_FRAMEEXAMPLE)
        }

        flavorDimensions "android"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        if ("SIT".equals(APP_URL_ENVIRONMENT)) {
            applicationId = rootProject.ext.android.applicationFrameSitId
        } else if ("UAT".equals(APP_URL_ENVIRONMENT)) {
            applicationId = rootProject.ext.android.applicationFrameUatId
        } else if ("RELEASE".equals(APP_URL_ENVIRONMENT)) {
            applicationId = rootProject.ext.android.applicationFrameId
        }

        //##################################################################### tinker step4 start
        /**
         * buildConfig can change during patch!
         * we can use the newly value when patch
         */
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
//        buildConfigField "String", "MESSAGE", "\"I am the patch apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
        //##################################################################### tinker step4 end
    }

    buildTypes {
        release {
            zipAlignEnabled false // Zipalign优化
            minifyEnabled false // 是否混淆
            shrinkResources false // 是否去除无效的资源文件
            // 自己声明的bean类和webview与JS交互的方法需要避免被混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            // mainfest中参数配置
            if ("SIT".equals(APP_URL_ENVIRONMENT)) {
                manifestPlaceholders = [
                        app_name      : "@string/app_name_sit",
                        app_icon      : "@mipmap/ic_launcher",
                        app_icon_round: "@mipmap/ic_launcher_round",
                        // UMENT配置
                        umeng_appkey  : "5a4d7b1fb27b0a7ea40003fc",
                        package_name  : rootProject.ext.android.applicationFrameId
                ]
            } else if ("UAT".equals(APP_URL_ENVIRONMENT)) {
                manifestPlaceholders = [
                        app_name      : "@string/app_name_uat",
                        app_icon      : "@mipmap/ic_launcher",
                        app_icon_round: "@mipmap/ic_launcher_round",
                        // UMENT配置
                        umeng_appkey  : "5a4d7b1fb27b0a7ea40003fc",
                        package_name  : rootProject.ext.android.applicationFrameId
                ]
            } else if ("RELEASE".equals(APP_URL_ENVIRONMENT)) {
                manifestPlaceholders = [
                        app_name      : "@string/app_name",
                        app_icon      : "@mipmap/ic_launcher",
                        app_icon_round: "@mipmap/ic_launcher_round",
                        // UMENT配置
                        umeng_appkey  : "5a4d7b1fb27b0a7ea40003fc",
                        package_name  : rootProject.ext.android.applicationFrameId
                ]
            }
        }

        debug {
            debuggable true
            zipAlignEnabled false // Zipalign优化
            minifyEnabled false // 是否混淆
            shrinkResources false // 是否去除无效的资源文件
            // 自己声明的bean类和webview与JS交互的方法需要避免被混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            // mainfest中参数配置
            if ("SIT".equals(APP_URL_ENVIRONMENT)) {
                manifestPlaceholders = [
                        app_name      : "@string/app_name_dev_sit",
                        app_icon      : "@mipmap/ic_launcher",
                        app_icon_round: "@mipmap/ic_launcher_round",
                        // UMENT配置
                        umeng_appkey  : "5a4d7b768f4a9d2d71000853",
                        package_name  : rootProject.ext.android.applicationFrameId
                ]
            } else if ("UAT".equals(APP_URL_ENVIRONMENT)) {
                manifestPlaceholders = [
                        app_name      : "@string/app_name_dev_uat",
                        app_icon      : "@mipmap/ic_launcher",
                        app_icon_round: "@mipmap/ic_launcher_round",
                        // UMENT配置
                        umeng_appkey  : "5a4d7b768f4a9d2d71000853",
                        package_name  : rootProject.ext.android.applicationFrameId
                ]
            } else if ("RELEASE".equals(APP_URL_ENVIRONMENT)) {
                manifestPlaceholders = [
                        app_name      : "@string/app_name_dev",
                        app_icon      : "@mipmap/ic_launcher",
                        app_icon_round: "@mipmap/ic_launcher_round",
                        // UMENT配置
                        umeng_appkey  : "5a4d7b768f4a9d2d71000853",
                        package_name  : rootProject.ext.android.applicationFrameId
                ]
            }
        }
    }

    productFlavors {
        yybao {}     // 应用宝
        m360 {}     // 360手机助手
        xiaomi {}   // 小米应用商店
        baidu {}   // 百度手机助手
        vivo {}   // VIVO应用商店
        huawei {}  // 华为应用商店
        oppo {}   // OPPO应用商店
        wandoujia {} // 豌豆荚
        meizu {}  // 魅族应用商店
        sanxing {}  // 三星应用商店
        other {}   // 其他应用商店（包括一些量级很小的应用商店）
        update {}   // 升级渠道，需要提交给产品

        // 设置渠道包名称
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [umeng_channel: name]
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        // tinker的最佳实践，防止由于字符串增多导致force-jumbol，导致更多的变更
        jumboMode = true
    }

    dataBinding {
        enabled true
    }

    // Android6.0删除了HttpClient的相关类,android 6.0(api 23) SDK，不再提供org.apache.http.*(只保留几个类).
    useLibrary 'org.apache.http.legacy'

    // to resolve-->  Error:Conflict with dependency 'com.google.code.findbugs:jsr305' in project ':app'.
    // Resolved versions for app (3.0.1) and test app (2.0.1) differ. See http://g.co/androidstudio/app-test-app-conflict for details.
    configurations.all {
        //解决 Conflict with dependency 'com.google.code.findbugs:jsr305'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    // 解决 is not translated in "zh" ，防止自动打包失败
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        // lint时候终止错误上报,防止编译的时候莫名的失败
        abortOnError false
    }

    // 修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName
                fileName = "FRAMEEXAMPLE_" + APP_URL_ENVIRONMENT + "_" + variant.productFlavors[0].name + "_v${defaultConfig.versionName}_${packTime()}.apk"
                outputFileName = fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 排除掉中间生成的META-INF/xxx文件
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    // 目录指向配置
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }
    }

}

// 在开发过程中,有的时候引入了多个三方库.在调用的时候会出现版本对应不上的情况，就会报错：
// Didn't find class "android.support.v4.animation.AnimatorCompatHelper,添加下面代码，强制版本号统一
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.1.0'
            }
        }
    }
}

// 解决Kotlin和DataBinding冲突
kapt {
    generateStubs = true
}

//##################################################################### tinker step5 start
def gitSha() {
    try {
        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

def bakPath = file("${buildDir}/bakApk/")

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-debug-1018-17-32-47.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/app-debug-1018-17-32-47-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-debug-1018-17-32-47-R.txt"

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"
}


def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        ignoreWarning = false

        /**
         * optional，default 'true'
         * whether sign the patch file
         * if not, you must do yourself. otherwise it can't check success during the patch loading
         * we will use the sign config with your build type
         */
        useSign = true

        /**
         * optional，default 'true'
         * whether use tinker to build
         */
        tinkerEnable = buildWithTinker()

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
            /**
             * optional，default 'null'
             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
             * apk mapping file if minifyEnabled is enable!
             * Warning:
             * you must be careful that it will affect the normal assemble build!
             */
            applyMapping = getApplyMappingPath()
            /**
             * optional，default 'null'
             * It is nice to keep the resource id from R.txt file to reduce java changes
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * necessary，default 'null'
             * because we don't want to check the base apk with md5 in the runtime(it is slow)
             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
             * we can use git rev, svn rev or simply versionCode.
             * we will gen the tinkerId in your manifest automatic
             */
            tinkerId = getTinkerIdValue()

            /**
             * if keepDexApply is true, class in which dex refer to the old apk.
             * open this can reduce the dex diff file size.
             */
            keepDexApply = false

            /**
             * optional, default 'false'
             * Whether tinker should treat the base apk as the one being protected by app
             * protection tools.
             * If this attribute is true, the generated patch package will contain a
             * dex including all changed classes instead of any dexdiff patch-info files.
             */
            isProtectedApp = false

            /**
             * optional, default 'false'
             * Whether tinker should support component hotplug (add new component dynamically).
             * If this attribute is true, the component added in new apk will be available after
             * patch is successfully loaded. Otherwise an error would be announced when generating patch
             * on compile-time.
             *
             * <b>Notice that currently this feature is incubating and only support NON-EXPORTED Activity</b>
             */
            supportHotplugComponent = false
        }

        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"

            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    "tinker.sample.android.app.BaseBuildInfo"
            ]
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/*/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")
            /**
             * patch version via packageConfig
             */
            configField("patchVersion", "1.0")
        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.first().outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}
//##################################################################### tinker step5 end

dependencies {
    def dependencies = rootProject.ext.dependencies
    //################## 系统级
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation dependencies.appcompatV7
    implementation dependencies.constraintLayout
    testImplementation dependencies.junit
    androidTestImplementation dependencies.runner
    androidTestImplementation dependencies.espressoCore
    //################## 引入第三方jar包
    //################## git上第三方库
    //=== dagger
    api dependencies.dagger
    kapt dependencies.daggerCompiler
    //=== kotlin
    api dependencies.kotlinStdlib
    api dependencies.kotlinReflect
    //=== databinding
    kapt dependencies.databinding
    //=== deeplinkdispatch
    api dependencies.deeplinkdispatch
    kapt dependencies.deeplinkdispatchProcessor
    //=== tinker step3
    //tinker的核心库
    implementation(dependencies.tinkerLib) { changing = true }
    //可选，用于生成application类
    annotationProcessor(dependencies.tinkerAnno) { changing = true }
    compileOnly(dependencies.tinkerAnno) { changing = true }
    //################## 引用第三方工程
    implementation project(':baselibrary')
}
