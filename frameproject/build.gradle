apply plugin: 'com.android.application'
//===
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions' // 快捷的findviewByid操作
apply plugin: 'kotlin-kapt' // 让kotlin与databinding合谐并存

def packTime() {
    return new Date().format("yyyy-MM-dd_HH-mm")
}

//=== AndResGuard 因为编译较耗时，只对线上环境进行处理
if ("TRUE".equals(APP_IS_ONLINE_VERSION)) {
    apply plugin: 'AndResGuard'
    // AndResGuard
    andResGuard {
        // mappingFile = file("./resource_mapping.txt")
        mappingFile = null
        use7zip = true
        useSign = true
        // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
        keepRoot = false

        whiteList = [
                // your icon
                "R.drawable.icon",
                // for fabric
                "R.string.com.crashlytics.*",
                // Umeng sdk
                "R.anim.umeng*",
                "R.string.umeng*",
                "R.string.UM*",
                "R.string.tb_*",
                "R.layout.umeng*",
                "R.layout.socialize_*",
                "R.layout.*messager*",
                "R.layout.tb_*",
                "R.color.umeng*",
                "R.color.tb_*",
                "R.style.*UM*",
                "R.style.umeng*",
                "R.drawable.umeng*",
                "R.drawable.tb_*",
                "R.drawable.sina*",
                "R.drawable.qq_*",
                "R.drawable.tb_*",
                "R.id.umeng*",
                "R.id.*messager*",
                "R.id.progress_bar_parent",
                "R.id.socialize_*",
                "R.id.webView",
                // for google-services
                "R.string.google_app_id",
                "R.string.gcm_defaultSenderId",
                "R.string.default_web_client_id",
                "R.string.ga_trackingId",
                "R.string.firebase_database_url",
                "R.string.google_api_key",
                "R.string.google_crash_reporting_api_key",
                "R.dimen.rc_*"
        ]
        compressFilePattern = [
                "*.png",
                "*.jpg",
                "*.jpeg",
                "*.gif",
                "resources.arsc"
        ]
        sevenzip {
            artifact = 'com.tencent.mm:SevenZip:1.2.11'
            //path = "/usr/local/bin/7za"
        }
        /**
         * 可选： 如果不设置则会默认覆盖assemble输出的apk
         **/
        // finalApkBackupPath = "${project.rootDir}/final.apk"
        /**
         * 可选: 指定v1签名时生成jar文件的摘要算法
         * 默认值为“SHA-1”
         **/
        // digestalg = "SHA-256"
        /**
         * 注意问题
         mappingFile用于增量更新，保持本次混淆与上次混淆结果一致；
         uss7zip为true时，useSign必须为true；
         useSign为true时，需要配置signConfig；
         whiteList添加在代码内部需要动态获取的资源id；
         sevenzip可使用artifacr或path，path指本地安装的7za（7zip命令行工具）。
         */
    }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    signingConfigs {
        signingConfig {
            keyAlias 'frameexample'
            keyPassword '12345!#%@$'
            storeFile file('../andframework.jks')
            storePassword '12345!#%@$'
        }
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion

        // gradle.properties中配置项
        resValue("string", 'APP_VERSION_FRAMEEXAMPLE', APP_VERSION_FRAMEEXAMPLE)
        resValue("string", 'APP_VERCODE_FRAMEEXAMPLE', APP_VERCODE_FRAMEEXAMPLE)
        resValue("string", 'APP_VERSION_FRAMEEXAMPLE_DEV', APP_VERSION_FRAMEEXAMPLE_DEV)
        resValue("string", 'APP_VERCODE_FRAMEEXAMPLE_DEV', APP_VERCODE_FRAMEEXAMPLE_DEV)
        resValue("string", 'APP_URL_ENVIRONMENT', APP_URL_ENVIRONMENT)
        resValue("string", 'APP_IS_SHOW_LOG', APP_IS_SHOW_LOG)
        resValue("string", 'APP_IS_ONLINE_VERSION', APP_IS_ONLINE_VERSION)

        //
        if ("FALSE".equals(APP_IS_ONLINE_VERSION)) {
            // 开发版本
            versionName APP_VERSION_FRAMEEXAMPLE_DEV
            versionCode java.lang.Integer.parseInt(APP_VERCODE_FRAMEEXAMPLE_DEV)
        } else {
            // 正式版本
            versionName APP_VERSION_FRAMEEXAMPLE
            versionCode java.lang.Integer.parseInt(APP_VERCODE_FRAMEEXAMPLE)
        }

        flavorDimensions "android"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        signingConfig signingConfigs.signingConfig
    }

    buildTypes {
        release {
            zipAlignEnabled false // Zipalign优化
            minifyEnabled false // 是否混淆
            shrinkResources false // 是否去除无效的资源文件
            // 自己声明的bean类和webview与JS交互的方法需要避免被混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.signingConfig
            // mainfest中参数配置
            manifestPlaceholders = [
                    app_name      : "@string/app_name",
                    app_icon      : "@mipmap/ic_launcher",
                    app_icon_round: "@mipmap/ic_launcher_round",
                    // UMENT配置
                    umeng_appkey  : "5a4d7b1fb27b0a7ea40003fc",
                    package_name  : rootProject.ext.android.applicationId
            ]
        }

        debug {
            zipAlignEnabled false // Zipalign优化
            minifyEnabled false // 是否混淆
            shrinkResources false // 是否去除无效的资源文件
            // 自己声明的bean类和webview与JS交互的方法需要避免被混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.signingConfig
            // mainfest中参数配置
            manifestPlaceholders = [
                    app_name      : "@string/app_name_dev",
                    app_icon      : "@mipmap/ic_launcher",
                    app_icon_round: "@mipmap/ic_launcher_round",
                    // UMENT配置
                    umeng_appkey  : "5a4d7b768f4a9d2d71000853",
                    package_name  : rootProject.ext.android.applicationId
            ]
        }
    }

    productFlavors {
        yybao {}     // 应用宝
        m360 {}     // 360手机助手
        xiaomi {}   // 小米应用商店
        baidu {}   // 百度手机助手
        vivo {}   // VIVO应用商店
        huawei {}  // 华为应用商店
        oppo {}   // OPPO应用商店
        wandoujia {} // 豌豆荚
        meizu {}  // 魅族应用商店
        sanxing {}  // 三星应用商店
        other {}   // 其他应用商店（包括一些量级很小的应用商店）
        update {}   // 升级渠道，需要提交给产品

        // 设置渠道包名称
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [umeng_channel: name]
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    dataBinding {
        enabled true
    }

    // Android6.0删除了HttpClient的相关类,android 6.0(api 23) SDK，不再提供org.apache.http.*(只保留几个类).
    useLibrary 'org.apache.http.legacy'

    // to resolve-->  Error:Conflict with dependency 'com.google.code.findbugs:jsr305' in project ':app'.
    // Resolved versions for app (3.0.1) and test app (2.0.1) differ. See http://g.co/androidstudio/app-test-app-conflict for details.
    configurations.all {
        //解决 Conflict with dependency 'com.google.code.findbugs:jsr305'
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    // 解决 is not translated in "zh" ，防止自动打包失败
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        // lint时候终止错误上报,防止编译的时候莫名的失败
        abortOnError false
    }

    // 修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName
                fileName = "FRAMEPROJECT_" + APP_URL_ENVIRONMENT + "_" + variant.productFlavors[0].name + "_v${defaultConfig.versionName}_${packTime()}.apk"
                outputFileName = fileName
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 排除掉中间生成的META-INF/xxx文件
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    // 目录指向配置
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }
    }

}

// 在开发过程中,有的时候引入了多个三方库.在调用的时候会出现版本对应不上的情况，就会报错：
// Didn't find class "android.support.v4.animation.AnimatorCompatHelper,添加下面代码，强制版本号统一
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.1.0'
            }
        }
    }
}

// 解决Kotlin和DataBinding冲突
kapt {
    generateStubs = true
}

dependencies {
    def dependencies = rootProject.ext.dependencies
    //################## 系统级
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation dependencies.appcompatV7
    implementation dependencies.constraintLayout
    testImplementation dependencies.junit
    androidTestImplementation dependencies.runner
    androidTestImplementation dependencies.espressoCore
    //################## 引入第三方jar包
    //################## git上第三方库
    //=== dagger
    api dependencies.dagger
    kapt dependencies.daggerCompiler
    //=== kotlin
    api dependencies.kotlinStdlib
    api dependencies.kotlinReflect
    //=== databinding
    kapt dependencies.databinding
    //=== deeplinkdispatch
    api dependencies.deeplinkdispatch
    kapt dependencies.deeplinkdispatchProcessor
    //################## 引用第三方工程
    implementation project(':baselibrary')
    implementation project(':tab1stlibrary')
    implementation project(':tab2ndlibrary')
    implementation project(':tab3rdlibrary')
}
